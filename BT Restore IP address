"""
Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.

A valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses and "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses. 

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]
Example 2:

Input: s = "0000"
Output: ["0.0.0.0"]
Example 3:

Input: s = "1111"
Output: ["1.1.1.1"]
"""

def restoreIpAddresses(self, s: str) -> List[str]:
    
        if not 4 <= len(s) <= 12:return []
        
        def helper(ind,temp,result):
            
            if len(temp) == 4:
                if ind == len(s):
                    result.append('.'.join(temp))
            
            num = ''
            for i in range(ind,min(ind+3,len(s))):
                num+=s[i]
                if num[0] == "0" and len(num) > 1:break
                if 0 <= int(num) <= 255:
                    temp.append(num)
                    helper(i+1,temp,result)
                    temp.pop()
                    
        result = []
        helper(0,[],result)
        return result
        
        
        
