"""
The matrix representation gives the advantage when the graph is dense, meaning when most of the nodes/vertices are connected to each other. 
This is because in such cases, by using the entry of matrix, it saves us from having to allocate an extra pointer (which need a word size memory) 
for each connection.

For sparse graph, the list approach is better because you don't need to account for the 0 entries when there is no connection between the vertices.
"""



from _collections import deque
def bfs(graph,s):
    #Time complexity is O(V + E)
    visited = set()
    q = [s]
    op = set()
    while q:
        curr = q.pop(0)
        visited.add(curr)
        op.add(curr)

        for v in graph[curr]:
            if v not in visited:
                q.append(v)
    return op

def dfs(graph,s):
    # Time complexity is O(V + E)
    visited = set()
    q = [s]
    op = set()
    while q:
        curr = q.pop()
        visited.add(curr)
        op.add(curr)

        for v in graph[curr]:
            if v not in visited:
                q.append(v)
    return op

def dfs_recurr(graph, s):
    # set is used to mark visited vertices
    visited = set()

    def recur(current_vertex):
        print(current_vertex)
        visited.add(current_vertex)

        for v in graph[current_vertex]:
            if v not in visited:
                recur(v)
    recur(s)

def topological_sort(graph):
    visited = set()
    stack = []

    def recur(curr):
        visited.add(curr)

        for v in graph[curr]:
            if v not in visited:
                recur(v)

        # Add to stack after all its neighbours are visited
        stack.append(curr)

    for i in range(len(graph)):
        if i not in visited:
            recur(i)
    return stack[::-1]


def is_cyclic_directed_graph(graph):
    visited = set()
    parent = set()

    def recur(current_vertex):

        visited.add(current_vertex)
        parent.add(current_vertex)

        # Recur for all the vertices adjacent to current_vertex
        for v in graph[current_vertex]:
            if v not in visited:
                if recur(v): return True
            elif v in parent: return True

        # remove from the parent vertices
        parent.remove(v)
        return False

    for i in range(len(graph)):
        if i not in visited:
            if recur(i): return True

def is_cyclic_undirected_graph(graph):
    visited = set()

    def recur(current_vertex, parent):

        visited.add(current_vertex)

        # Recur for all the vertices adjacent to current_vertex
        for v in graph[current_vertex]:
            if v not in visited:
                if recur(v, current_vertex):return True
            # v in visited but it is not parent
            elif v != parent: return True

        return False

    for i in range(len(graph)):
        if i not in visited:
            if recur(i,-1): return True

def shortest_path_unwighed(graph,s,d):

    visited = set()
    q = [s]
    pred = [-1] * len(graph)

    while q:
        curr = q.pop(0)
        visited.add(curr)

        for v in graph[curr]:
            if v not in visited:
                q.append(v)
                pred[v] = curr
            if v == d:
                break

    if pred[d] == -1: return []

    path = [d]
    current = d
    while pred[current] != -1:
        current = pred[current]
        path.append(current)

    return path[::-1]




if __name__ == '__main__':
    graph = [[1,2], [0,2,4], [0,1,3], [2], [1]]
    s = 0

    #print(dfs_recurr(graph,s))
    #all the vertices may not be reachable from a given vertex (example Disconnected graph).
    # To do complete DFS traversal, we need to call DFS for every vertex.
    directed_g = [[1,2], [2], [0,3], [], [1]]
    #print(is_cyclic_directed_graph(directed_g))
    und_graph = [[1, 2], [0, 2, 4], [0, 1, 3], [2], [1]]
    #print(is_cyclic_undirected_graph(und_graph))
    d_graph = [[1,2], [2], [3], [], [1]]
    #print(topological_sort(d_graph))
    assert topological_sort(d_graph) == [4, 0, 1, 2, 3]
