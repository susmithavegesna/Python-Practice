"""
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

"""

class Solution:
    def findCircleNum(self, G: List[List[int]]) -> int:
        
        q = [0]
        visited = [False]*len(G)
        count = 0
        
        
        def dfs(u):
            if visited[u] : return
            visited[u] = True
            
            for i in range(len(G)):
                if G[u][i] == 1 and not visited[i] :
                    helper(i)
          
          
        for j in range(len(G)):
            #for k in range(len(G)):
            if visited[j] == False:
                count += 1
                dfs(j)
        
        return count
        
