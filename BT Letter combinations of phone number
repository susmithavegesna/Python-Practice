"""
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
"""

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        d={"2":"abc","3":"def","4":"ghi","5":"jkl","6":"mno","7":"pqrs","8":"tuv","9":"wxyz"}
        
        result = []
        temp =[]
        
        if digits == "": return []
        def helper(d,result,temp,index,digits):
            if len(temp) == len(digits):
                result.append("".join(temp[:]))
                return
            for i in d[digits[index]]:
                #if d[digits[i]] in temp: continue
                temp.append(i)
                helper(d,result,temp,index+1,digits)
                temp.pop()
        
        helper(d,result,temp,0,digits)
        return result
