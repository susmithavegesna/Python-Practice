

def isSubsetSum(set, n, sum):
     
    subset =([[False for i in range(sum + 1)]
            for i in range(n + 1)])
     
    for i in range(n + 1):
        subset[i][0] = True
         
    for i in range(1, sum + 1):
         subset[0][i]= False
             
    
    # Fill the subset table in botton up manner
    for i in range(1, n + 1):
        for j in range(1, sum + 1):
            if j<set[i-1]:
                subset[i][j] = subset[i-1][j]
            if j>= set[i-1]:
                subset[i][j] = (subset[i-1][j] or
                                subset[i - 1][j-set[i-1]])
    
    
    return subset[n][sum]
    
    
    
    # uncomment this code to print table
    # for i in range(n + 1):
    # for j in range(sum + 1):
    # print (subset[i][j], end =" ")
    # print()
    
    
    
"""
set= {2,2,3}, n = 3, sum = 5
DP array dimensions: no of elements+1 by sum+1

dp[0] :False - cannot achieve a sum value without selecting elements. (Exception 0)

DP[I][0]: Always True - can always achieve sum 0

1st element in the set is 2 so here I’m subtracting Col by 2 in calculations
DP[1][1]: Include or exclude 1st element to make a sum 1:  2>1 for include false or dp[1-1][1] => F
dp[1][2]: Include or Exclude 1st element to make sum 2: with include, new sum =0  dp[1-1][2-2] True or _
dp[1][3]:  Include or Exclude 1st element to make sum 3: 3-2 = 1 check dp[1-1][3-2] or dp[1-1][3]
dp[1][4]:  Include or Exclude 1st element to make sum 4: dp[1-1][4-2] 0r dp[1-1][4]
………..

dp[3][3]: Include or Exclude 3rd element to make sum 3: dp[3-1][3-3] or dp[3-1][3]
dp[3][4]: Include or Exclude 3rd element to make sum 4: dp[3-1][4-3] or dp[3-1][4]
dp[3][5]: Include or Exclude 3rd element to make sum 5: dp[3-1][5-3] or dp[3-1][5]

Return dp[-1][-1]
"""
