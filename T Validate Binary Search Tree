"""
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        
        if root == None: return True
        
        def helper(N,Minval,Maxval):
            
            if N == None: return True
            
            if N.val <= Minval or N.val >= Maxval: return False 
            
            return helper(N.left,Minval,N.val) and helper(N.right,N.val,Maxval)
            
            
            
        #print(helper(root))
        return helper(root,float("-inf"),float("+inf"))
        
        
            
        
