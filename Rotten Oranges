"""
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

"""

def orangesRotting(self, grid: List[List[int]]) -> int:
    # Graph BFS
        
        if len(grid) == 0 :return -1
        if len(grid[0]) == 0: return -1
        
        day = 0
        q = []
        visited = set()
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    q.append([i,j,day])
        
        while q:
            i,j,day = q.pop(0)
            visited.add((i,j))
            
            for x,y in [[i-1,j],[i+1,j],[i,j-1],[i,j+1]]:
                if 0<=x<len(grid) and 0<=y<len(grid[0]) and grid[x][y] ==1 and (x,y) not in visited:
                    grid[x][y] =2
                    q.append([x,y,day+1])
                    
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return -1
        
        return day
                    
        
        
